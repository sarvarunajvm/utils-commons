plugins {
    id 'java'
    id 'org.kordamp.gradle.java-project' version '0.46.0'
    id 'org.jreleaser' version '0.5.0'
    id 'com.gorylenko.gradle-git-properties' version '2.2.2'
}

group 'com.github.sarvarunajvm'
version = 'v1.0.1'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()
}
gitProperties {
    gitPropertiesName = "Version.properties"
    keys = ['git.branch', 'git.commit.id', 'git.commit.time', 'git.commit.id.describe', 'git.closest.tag.name', 'git.closest.tag.commit.count', 'git.build.version']
    extProperty = 'gitProps' // git properties will be put in a map at project.ext.gitProps
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "IST"
}
generateGitProperties.outputs.upToDateWhen { false }

task printGitProperties(dependsOn: 'generateGitProperties') {
    // make sure generateGitProperties task to execute before accessing generated properties
    doLast {
        version = project.ext.gitProps['git.closest.tag.name'] + "." + project.ext.gitProps['git.closest.tag.commit.count']
        println "Version : " + version
        println "git.commit.id.describe=" + project.ext.gitProps['git.commit.id.describe']
    }
}
jar {
    dependsOn printGitProperties
    enabled = true
}

config {
    info {
        name = 'utils-commons'
        vendor = 'github'
        description = 'sarvarunajvm'
        inceptionYear = '2021'
        tags = ['release']

        links {
            website = "https://github.com/sarvarunajvm/${project.rootProject.name}"
            issueTracker = "https://github.com/sarvarunajvm/${project.rootProject.name}/issues"
            scm = "https://github.com/sarvarunajvm/${project.rootProject.name}.git"
        }

        scm {
            url = "https://github.com/sarvarunajvm/${project.rootProject.name}"
            connection = "scm:git:https://github.com/sarvarunajvm/${project.rootProject.name}.git"
            developerConnection = "scm:git:git@github.com:sarvarunajvm/${project.rootProject.name}.git"
        }

        people {
            person {
                id = 'sarvarunajvm'
                name = 'Saravanan Kalimuthu'
                roles = ['developer', 'author']
            }
        }

        licensing {
            licenses {
                license {
                    id = 'Apache-2.0'
                }
            }
        }
    }
}

jreleaser {
    assemble {
        enabled = true
    }
    release {
        github {
            owner = 'sarvarunajvm'
            overwrite = true
            host = 'github.com'
            token = System.getenv('SECRET_TOKEN')
            branch = 'main'
            commitAuthor {
                name = 'releaserbot'
                email = 'releaser@jvm.org'
            }
            changelog {
                enabled = true
                sort = 'ASC'
                links = false
                formatted = 'ALWAYS'
                change = '- {{commitShortHash}} {{commitTitle}}'
                content = '#Changelog\n\n{{changelogChanges}}\n{{changelogContributors}}'

                // Defines rules that apply labels to changes.
                // Matchers are evaluated independently; the label will
                // be set if at least one of the matchers meets the criteria.
                //
                labeler {
                    // The label to be applied.
                    //
                    label = 'issue'

                    // Matches the text of the first commit line.
                    //
                    title = '^fix:'

                    // Matches the full text of the commit.
                    //
                    body = 'Fixes #'
                }

                // Groups changes by category.
                // Defaults are shown.
                //
                category {
                    title = 'üöÄ Features'
                    labels = [
                            'feature',
                            'enhancement'
                    ]
                }
                category {
                    title = 'üêõ Bug Fixes'
                    labels = [
                            'bug',
                            'fix'
                    ]
                }
            }
        }
    }
//    announce {
    //
//        twitter {
//            active =  true
//            connectTimeout = 20
//            readTimeout = 60

    // The consumer key.
    // If left unspecified, the `JRELEASER_TWITTER_CONSUMER_KEY`
    // environment variable must be defined.
    //
//            consumerKey = JRELEASER_TWITTER_CONSUMER_KEY

    // The consumer token.
    // If left unspecified, the `JRELEASER_TWITTER_CONSUMER_TOKEN`
    // environment variable must be defined.
    //
//            consumerToken = '__DO_NOT_SET_HERE__'

    // The access token.
    // If left unspecified, the `JRELEASER_TWITTER_ACCESS_TOKEN`
    // environment variable must be defined.
    //
//            accessToken = '__DO_NOT_SET_HERE__'

    // The access token secret.
    // If left unspecified, the `JRELEASER_TWITTER_ACCESS_TOKEN`_SECRET`
    // environment variable must be defined.
    //
//            accessTokenSecret = '__DO_NOT_SET_HERE__'

    // The announcement message.
    // Review the available Name Templates.
    //
//            status = ' {{projectNameCapitalized}} {{projectVersion}} has been released! {{releaseNotesUrl}}'

    // Additional properties used when evaluating templates.
    // Key will be capitalized and prefixed with `twitter`, i.e, `twitterFoo`.
    //
//            extraProperties.put('foo', 'bar')
//        }
//    }
}